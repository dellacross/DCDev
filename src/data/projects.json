[
  {
    "id":"1",
    "name": "Área Restrita",
    "description": "Área Restrita - Sistema Web de Gestão Acadêmica\n\nO projeto Área Restrita é um sistema web desenvolvido para facilitar o acesso e a gestão de informações acadêmicas por alunos, professores e colaboradores de uma instituição de ensino. Construído com React, o sistema oferece uma interface moderna, responsiva e intuitiva, integrando diversos módulos essenciais para o dia a dia escolar.\n\nPrincipais funcionalidades:\n\n• Dashboard personalizado: Visualização rápida de informações relevantes, como avisos, agenda, boletim, horários e documentos.\n\n• Gestão de arquivos: Download e visualização de documentos acadêmicos, declarações, boletos e arquivos diversos.\n\n• Controle de atividades: Acompanhamento de atividades complementares, estágio, rematrícula, plano de aula e ocorrências.\n\n• Integração com serviços externos: Login via Google/Microsoft, integração com APIs institucionais e Google Analytics.\n\n• Notificações e alertas: Sistema de notificações em tempo real, mensagens de atenção e animações de feedback.\n\n• Acessibilidade e usabilidade: Navegação adaptada para dispositivos móveis, temas claro/escuro e componentes reutilizáveis.\n\nO sistema foi desenvolvido com foco em segurança, escalabilidade e experiência do usuário, utilizando boas práticas de arquitetura front-end, gerenciamento de contexto global, hooks customizados e integração com serviços RESTful.\n\nDurante o desenvolvimento, alguns dos principais desafios foram:\n\n• Gerenciamento de estado complexo: Lidar com múltiplos contextos e hooks personalizados para manter o estado global e local sincronizado, especialmente em páginas com muitos componentes interativos.\n\n• Sincronização entre renderização e manipulação do DOM: Como visto no caso do formulário Pearson, garantir que elementos estejam disponíveis no DOM antes de acessá-los foi um ponto crítico, exigindo uso correto de refs e efeitos.\n\n• Integração com APIs externas: Implementar hooks como useRequest para abstrair chamadas HTTP, tratar erros e loading, além de garantir segurança e performance.\n\n• Performance e responsividade: Otimizar renderizações usando useMemo, useCallback e lazy loading de componentes, além de garantir boa experiência em dispositivos móveis.\n\n• Validação e tratamento de dados: Criar utilitários para conversão, validação e formatação de dados, como conversão de notas, tratamento de arquivos e manipulação de tokens.\n\nAprendizados\n\n• React avançado: Uso eficiente de hooks, contextos, refs e efeitos para criar aplicações robustas e escaláveis.\n\n• Boas práticas de arquitetura: Separação clara entre componentes, hooks, utilitários e serviços, facilitando manutenção e testes.\n\n• Debugging e timing: Entendimento profundo do ciclo de vida dos componentes e renderização do React, evitando bugs relacionados ao acesso ao DOM.\n\n• UX/UI: Importância de feedback visual, responsividade e acessibilidade para melhorar a experiência do usuário.\n\n• Colaboração e versionamento: Uso de Git, branches e pull requests para trabalho colaborativo e controle de versões.",
    "skills": [
      { "name": "JavaScript", "color": "#F7DF1E", "field": "Linguagem" },
      { "name": "HTML", "color": "#E44D26", "field": "Front-end" },
      { "name": "CSS", "color": "#1572B6", "field": "Front-end" },
      { "name": "React", "color": "#61DAFB", "field": "Front-end" },
      { "name": "RESTful API", "color": "#A2E0AD", "field": "Front-end" },
      { "name": "Axios", "color": "#8560E5", "field": "Front-end" },
      { "name": "Postman", "color": "#FF6C37", "field": "Ambiente de testes" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Front-end dev"] },
      { "id": "2", "name": "Virgílio Borges", "email": "virgilio@example.com", "roles": ["Back-end dev"] }
    ],
    "repositoryLink": null,
    "url": "https://restrito-beta.cotemig.com.br/",
    "demo": null
  },
  {
    "id":"2",
    "name": "PixManager",
    "description": "PixManager\n\nO PixManager é um painel web criado em React para facilitar o gerenciamento de cobranças Pix. Durante o desenvolvimento, enfrentei desafios como a organização eficiente dos componentes, o gerenciamento de estados globais e a integração de funcionalidades dinâmicas, como timers de expiração e notificações em tempo real.\n\nEntre as principais funcionalidades, destaco:\n\n• Visualização e acompanhamento de cobranças Pix com atualização automática de status.\n\n• Timer regressivo para expiração de cobranças.\n\n• Sistema de notificações para alertar o usuário sobre eventos importantes.\n\n• Navegação fluida entre diferentes páginas do dashboard.\n\n• Componentização e reutilização de elementos visuais.\n\n• Context API para gerenciamento centralizado de dados e estados.\n\n• Hooks personalizados para lógica de navegação e manipulação de dados.\n\nOs principais aprendizados envolveram o uso avançado do React, boas práticas de componentização, otimização de performance, além do domínio de CSS modularizado e TypeScript para garantir tipagem e segurança no código. O projeto também reforçou a importância do UX, da clareza visual e da escalabilidade na construção de aplicações web modernas.",
    "skills": [
      { "name": "TypeScript", "color": "#3178C6", "field": "Linguagem" },
      { "name": "HTML", "color": "#E44D26", "field": "Front-end" },
      { "name": "CSS", "color": "#1572B6", "field": "Front-end" },
      { "name": "React", "color": "#61DAFB", "field": "Front-end" },
      { "name": "RESTful API", "color": "#A2E0AD", "field": "Front-end" },
      { "name": "Axios", "color": "#8560E5", "field": "Front-end" },
      { "name": "Node.js", "color": "#339933", "field": "Back-end" },
      { "name": "Express", "color": "#000000", "field": "Back-end" },
      { "name": "JWT", "color": "#000000", "field": "Autenticação" },
      { "name": "Postman", "color": "#FF6C37", "field": "Ambiente de testes" },
      { "name": "PostgreSQL", "color": "#326690", "field": "Banco de dados" },
      { "name": "Prisma", "color": "#5A67D8", "field": "Back-end" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Full stack dev"] }
    ],
    "repositoryLink": null,
    "url": null,
    "demo": null
  },
  {
    "id":"3",
    "name": "DepositTracker",
    "description": "DepositTracker - Gerenciador de Depósitos\n\nDepositTracker é um sistema web desenvolvido para gerenciar depósitos e metas financeiras de forma simples e eficiente. O projeto é dividido em duas partes: um backend em Node.js com TypeScript, Express e Prisma, responsável pelo controle dos dados e regras de negócio, e um frontend em React, que oferece uma interface intuitiva para o usuário acompanhar depósitos, metas e histórico.\n\nDurante o desenvolvimento do DepositTracker, enfrentei diversos desafios técnicos e de arquitetura. Um dos principais foi estruturar a comunicação entre o backend (Node.js/Express/Prisma) e o frontend (React), garantindo segurança, performance e escalabilidade. A integração com o Prisma ORM exigiu atenção especial para modelagem dos dados e migrações, além de lidar com validações e consistência das informações.\n\nFuncionalidades implementadas:\n\n• CRUD completo de depósitos, com validação de dados e feedback ao usuário\n\n• Gerenciamento de metas financeiras, permitindo ao usuário acompanhar o progresso\n\n• Listagem, atualização e exclusão de depósitos individuais ou em massa\n\n• Utilização de hooks personalizados no React para consumo eficiente da API\n\n• Interface responsiva, com componentes reutilizáveis e estilização moderna\n\nAprendizados:\n\n• Aprimorei habilidades em TypeScript, tanto no backend quanto no frontend, melhorando a tipagem e a manutenção do código\n\n• Dominei o uso do Prisma para manipulação de banco de dados relacional, incluindo migrações e relacionamento entre entidades\n\n• Pratiquei boas práticas de arquitetura REST, separando controllers, services e rotas\n\n• Aprendi a lidar com estados globais e hooks avançados no React\n\n• Refinei o uso de testes automatizados para garantir a qualidade das principais funcionalidades\n\nO projeto DepositTracker foi fundamental para consolidar conhecimentos em desenvolvimento fullstack, integração de tecnologias modernas e entrega de soluções robustas para controle financeiro.",
    "skills": [
      { "name": "TypeScript", "color": "#3178C6", "field": "Linguagem" },
      { "name": "Node.js", "color": "#339933", "field": "Back-end" },
      { "name": "Express", "color": "#000000", "field": "Back-end" },
      { "name": "JWT", "color": "#000000", "field": "Autenticação" },
      { "name": "Postman", "color": "#FF6C37", "field": "Ambiente de testes" },
      { "name": "HTML", "color": "#E44D26", "field": "Front-end" },
      { "name": "CSS", "color": "#1572B6", "field": "Front-end" },
      { "name": "React", "color": "#61DAFB", "field": "Front-end" },
      { "name": "RESTful API", "color": "#A2E0AD", "field": "Front-end" },
      { "name": "Axios", "color": "#8560E5", "field": "Front-end" },
      { "name": "PostgreSQL", "color": "#326690", "field": "Banco de dados" },
      { "name": "Prisma", "color": "#5A67D8", "field": "Back-end" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Full stack dev"] }
    ],
    "repositoryLink": "https://github.com/dellacross/DepositTracker",
    "url": null,
    "demo": null
  },
  {
    "id":"4",
    "name": "DCDev",
    "description": "DCDev - Portfólio Profissional\n\nDCDev é um portfólio profissional construído com React, TypeScript e Tailwind CSS, projetado para apresentar experiências, projetos e habilidades de forma dinâmica e organizada.\n\nDurante o desenvolvimento, enfrentei desafios como a estruturação eficiente dos dados em JSON para garantir fácil manutenção e escalabilidade, além de implementar navegação entre páginas sem perder performance. A integração do Tailwind CSS exigiu atenção para manter o design responsivo e consistente em diferentes dispositivos.\n\nEntre as principais funcionalidades, destaco:\n\n• Organização modular de componentes reutilizáveis para cada área do portfólio (Sobre, Carreira, Educação, Projetos e Skills).\n\n• Sistema de tabs para navegação intuitiva entre diferentes categorias de informações.\n\n• Consumo de dados dinâmicos via arquivos JSON, facilitando atualizações sem alterar o código-fonte.\n\n• Layout responsivo e visual moderno, proporcionando uma experiência agradável ao usuário.\n\nOs principais aprendizados envolveram o uso avançado de React com TypeScript, boas práticas de componentização, gerenciamento de estado, e estilização com Tailwind CSS. Aprimorei também a manipulação de dados estáticos e a criação de interfaces acessíveis e performáticas.\n\nEsse projeto foi fundamental para consolidar conhecimentos em front-end moderno e fortalecer minha capacidade de entregar soluções profissionais e escaláveis.",
    "skills": [
      { "name": "TypeScript", "color": "#3178C6", "field": "Linguagem" },
      { "name": "HTML", "color": "#E44D26", "field": "Front-end" },
      { "name": "CSS", "color": "#1572B6", "field": "Front-end" },
      { "name": "React", "color": "#61DAFB", "field": "Front-end" },
      { "name": "RESTful API", "color": "#A2E0AD", "field": "Front-end" },
      { "name": "Tailwindcss", "color": "#00BCFF", "field": "Front-end" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Full stack dev"] }
    ],
    "repositoryLink": "https://github.com/dellacross/DCDev",
    "url": "https://dcdev-portfolio.netlify.app/",
    "demo": null
  },
  {
    "id":"5",
    "name": "SujeitoPizza",
    "description": "SujeitoPizza - Gerenciador de pedidos\n\nSujeitoPizza é uma aplicação web que desenvolvi durante um curso de desenvolvimento que realizei. Este sistema é para gestão de pedidos em pizzarias, desenvolvida com Node.js, TypeScript, Express e Prisma ORM. O projeto foi um grande desafio, especialmente na implementação da autenticação segura de usuários, manipulação de uploads de imagens com Multer e integração eficiente com o banco de dados utilizando o Prisma. A modelagem do banco exigiu atenção para garantir relacionamentos corretos entre usuários, categorias, produtos e pedidos.\n\nDurante o desenvolvimento, aprimorei habilidades em arquitetura de software, separando responsabilidades entre controllers, services e middlewares, o que facilitou a manutenção e escalabilidade do sistema. Aprendi a lidar com tratamento de erros, validação de dados e boas práticas de API RESTful.\n\nEntre as principais funcionalidades estão:\n\n• Cadastro e autenticação de usuários\n\n• Gerenciamento de categorias e produtos\n\n• Upload de imagens para produtos\n\n• Criação, listagem, detalhamento e finalização de pedidos\n\n• Remoção de itens e pedidos\n\n• Proteção de rotas com middleware de autenticação\n\n• Integração com banco de dados relacional via Prisma\n\nEsse projeto proporcionou uma experiência prática completa, desde o planejamento da estrutura até a entrega de uma solução funcional, robusta e pronta para uso em ambientes reais.",
    "skills": [
      { "name": "TypeScript", "color": "#3178C6", "field": "Linguagem" },
      { "name": "PostgreSQL", "color": "#326690", "field": "Banco de dados" },
      { "name": "Prisma", "color": "#5A67D8", "field": "Back-end" },
      { "name": "Node.js", "color": "#339933", "field": "Back-end" },
      { "name": "Express", "color": "#000000", "field": "Back-end" },
      { "name": "JWT", "color": "#000000", "field": "Autenticação" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Back-end dev"] }
    ],
    "repositoryLink": "https://github.com/dellacross/SujeitoPizza",
    "url": null,
    "demo": null
  },
  {
    "id":"6",
    "name": "Rede de dados climáticos",
    "description": "Rede de dados climáticos\n\nEste sistema de rede de dados climáticos é uma aplicação cliente-servidor, desenvolvida em linguagem C, criada como trabalho prático para a disciplina de Redes de Computadores. O projeto tem como objetivo principal implementar a comunicação entre processos distintos utilizando sockets TCP, simulando cenários reais de troca de dados em redes.\n\nFuncionalidades:\n\n• Estabelecimento de conexão entre cliente e servidor via TCP.\n\n• Troca de mensagens e comandos entre as partes, com tratamento de erros e desconexões.\n\n• Modularização do código em arquivos separados para funções comuns, facilitando a manutenção e reutilização.\n\n• Documentação técnica detalhada para auxiliar na compreensão e uso do sistema.\n\nDesafios enfrentados:\n\n• Implementação da comunicação robusta entre cliente e servidor, lidando com possíveis falhas de rede.\n\n• Gerenciamento de múltiplos estados de conexão e tratamento de exceções.\n\n• Estruturação do código para garantir clareza, organização e escalabilidade.\n\n• Adaptação do projeto para diferentes ambientes e sistemas operacionais.\n\nDurante o desenvolvimento, aprofundei meus conhecimentos em programação de redes, manipulação de sockets, protocolos de comunicação TCP/IP e boas práticas de desenvolvimento em C. O projeto também proporcionou experiência prática na resolução de problemas reais de conectividade, modularização de sistemas e documentação técnica..",
    "skills": [
      { "name": "C", "color": "#3948AD", "field": "Linguagem" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Dev"] }
    ],
    "repositoryLink": "https://github.com/dellacross/Redes-TP1",
    "url": null,
    "demo": null
  },
  {
    "id":"7",
    "name": "Rede de sistema elétrico",
    "description": "Rede de sistema elétrico\n\nEste sistema de rede de sistema elétrico é um projeto acadêmico, desenvolvido na linguagem C, que simula a comunicação entre cliente e servidor utilizando sockets TCP. O principal objetivo foi implementar um sistema capaz de transferir arquivos de texto entre as duas partes, explorando conceitos essenciais de redes de computadores.\n\nDurante o desenvolvimento, enfrentei desafios como o gerenciamento de múltiplas conexões simultâneas, tratamento de erros de comunicação, sincronização entre envio e recebimento de dados, além da manipulação eficiente de arquivos no sistema operacional. A implementação exigiu atenção especial à estrutura dos pacotes, controle de fluxo e à robustez do código para evitar falhas inesperadas.\n\nEntre os principais aprendizados, destaco o domínio da API de sockets em C, compreensão do funcionamento do protocolo TCP, técnicas de modularização do código e boas práticas de documentação. O projeto também proporcionou experiência prática em depuração de aplicações de rede e na resolução de problemas reais de comunicação.\n\nAs funcionalidades implementadas incluem:\n\n• Envio e recebimento de arquivos de texto entre cliente e servidor\n\n• Validação e manipulação dos arquivos transferidos\n\n• Tratamento de múltiplas requisições\n\n• Mensagens de status e feedback para o usuário\n\n• Estrutura modular com arquivos separados para funções comuns e principais\n\nEsse projeto demonstra habilidades técnicas em programação de baixo nível, lógica de redes, resolução de problemas e organização de sistemas distribuídos, sendo uma excelente adição ao portfólio para quem busca atuar na área de redes ou desenvolvimento de sistemas.",
    "skills": [
      { "name": "C", "color": "#3948AD", "field": "Linguagem" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Dev"] }
    ],
    "repositoryLink": "https://github.com/dellacross/Redes-TP2",
    "url": null,
    "demo": null
  },
  {
    "id":"8",
    "name": "Gestão de jogos de loteria",
    "description": "Análise e Simulação da Mega-Sena\n\nEste projeto foi desenvolvido com o objetivo de aplicar estatística e programação em um contexto prático: a loteria Mega-Sena. Através de um notebook em Python, construí um sistema que simula apostas, sorteios e probabilidades, permitindo observar o quão improvável é acertar diferentes faixas de premiação.\n\nFuncionalidades\n\n• Geração de apostas aleatórias seguindo as regras oficiais da Mega-Sena.\n\n• Simulação de sorteios em grande escala para avaliar probabilidades reais de acertos.\n\n• Análise estatística da frequência de números sorteados e possíveis padrões.\n\n• Visualizações gráficas para melhor interpretação dos resultados.\n\n• Cálculo automatizado de combinações e probabilidades, considerando diferentes estratégias de jogo.\n\nDesafios enfrentados\n\n• Modelar corretamente as regras da Mega-Sena em código, garantindo precisão nos cálculos.\n\n• Lidar com a grande quantidade de combinações possíveis e otimizar as simulações.\n\n• Criar visualizações claras e objetivas para um tema que envolve números extensos e complexos.\n\n• Equilibrar simplicidade de uso com profundidade nas análises.\n\nAprendizados\n\n• Aprofundamento em probabilidade e estatística aplicadas a cenários reais.\n\n• Melhoria das habilidades em Python, especialmente com bibliotecas como NumPy, Pandas e Matplotlib.\n\n• Prática de organização de projetos em Jupyter Notebook, tornando a análise interativa e de fácil compreensão.\n\n• Desenvolvimento da capacidade de transformar problemas abstratos em soluções computacionais práticas.",
    "skills": [
      { "name": "Python", "color": "#34719E", "field": "Linguagem" },
      { "name": "Jupyter Notebook", "color": "#F37626", "field": "Ambiente de desenvolvimento" },
      { "name": "Pandas", "color": "#150458", "field": "Ferramenta" },
      { "name": "NumPy", "color": "#013243", "field": "Ferramenta" },
      { "name": "Matplotlib", "color": "#003B5C", "field": "Ferramenta" }
    ],
    "members": [
      { "id": "1", "name": "Victor Della", "email": "victor@example.com", "roles": ["Dev"] }
    ],
    "repositoryLink": "https://colab.research.google.com/drive/1EhB1js637VId0vGQj5uq7czNnjj5Eyt_#scrollTo=J-t_zENLXCfn",
    "url": null,
    "demo": {
        "title": "Vídeo de apresentação",
        "name": "Análise e Simulação da Mega-Sena",
        "link": "https://www.youtube.com/embed/QhBnZ6NPOY0",
        "image": null,
        "video": null,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean bibendum nec augue eu efficitur. Proin sit amet laoreet nunc. Vestibulum sagittis magna vitae augue sodales blandit. Pellentesque tempus dignissim euismod. Sed neque quam, venenatis non iaculis eget, ultrices sed quam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus at ornare nunc. Vestibulum in mauris id felis consectetur viverra nec eget elit. Nulla congue dapibus ligula facilisis mattis. Vestibulum eleifend et arcu nec sagittis. Nulla mattis quam quis augue accumsan lacinia. Aliquam erat volutpat.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean bibendum nec augue eu efficitur. Proin sit amet laoreet nunc. Vestibulum sagittis magna vitae augue sodales blandit. Pellentesque tempus dignissim euismod. Sed neque quam, venenatis non iaculis eget, ultrices sed quam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus at ornare nunc. Vestibulum in mauris id felis consectetur viverra nec eget elit. Nulla congue dapibus ligula facilisis mattis. Vestibulum eleifend et arcu nec sagittis. Nulla mattis quam quis augue accumsan lacinia. Aliquam erat volutpat.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean bibendum nec augue eu efficitur. Proin sit amet laoreet nunc. Vestibulum sagittis magna vitae augue sodales blandit. Pellentesque tempus dignissim euismod. Sed neque quam, venenatis non iaculis eget, ultrices sed quam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus at ornare nunc. Vestibulum in mauris id felis consectetur viverra nec eget elit. Nulla congue dapibus ligula facilisis mattis. Vestibulum eleifend et arcu nec sagittis. Nulla mattis quam quis augue accumsan lacinia. Aliquam erat volutpat."
    }
  }
]
